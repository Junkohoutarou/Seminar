{"ast":null,"code":"import EmblaCarousel from 'embla-carousel';\nvar defaultOptions = {\n  active: true,\n  breakpoints: {},\n  delay: 4000,\n  jump: false,\n  playOnInit: true,\n  stopOnInteraction: true,\n  stopOnMouseEnter: false,\n  stopOnLastSnap: false,\n  rootNode: null\n};\nfunction Autoplay(userOptions) {\n  var optionsHandler = EmblaCarousel.optionsHandler();\n  var optionsBase = optionsHandler.merge(defaultOptions, Autoplay.globalOptions);\n  var options;\n  var carousel;\n  var interaction;\n  var timer = 0;\n  var jump = false;\n  function init(embla) {\n    carousel = embla;\n    options = optionsHandler.atMedia(self.options);\n    jump = options.jump;\n    interaction = options.stopOnInteraction ? destroy : stop;\n    var eventStore = carousel.internalEngine().eventStore;\n    var emblaRoot = carousel.rootNode();\n    var root = options.rootNode && options.rootNode(emblaRoot) || emblaRoot;\n    carousel.on('pointerDown', interaction);\n    if (!options.stopOnInteraction) carousel.on('pointerUp', reset);\n    if (options.stopOnMouseEnter) {\n      eventStore.add(root, 'mouseenter', interaction);\n      if (!options.stopOnInteraction) eventStore.add(root, 'mouseleave', reset);\n    }\n    eventStore.add(document, 'visibilitychange', function () {\n      if (document.visibilityState === 'hidden') return stop();\n      reset();\n    });\n    eventStore.add(window, 'pagehide', function (event) {\n      if (event.persisted) stop();\n    });\n    if (options.playOnInit) play();\n  }\n  function destroy() {\n    carousel.off('pointerDown', interaction);\n    if (!options.stopOnInteraction) carousel.off('pointerUp', reset);\n    stop();\n    timer = 0;\n  }\n  function play(jumpOverride) {\n    stop();\n    if (typeof jumpOverride !== 'undefined') jump = jumpOverride;\n    timer = window.setTimeout(next, options.delay);\n  }\n  function stop() {\n    if (!timer) return;\n    window.clearTimeout(timer);\n  }\n  function reset() {\n    if (!timer) return;\n    stop();\n    play();\n  }\n  function next() {\n    var index = carousel.internalEngine().index;\n    var kill = options.stopOnLastSnap && index.get() === index.max;\n    if (kill) return destroy();\n    if (carousel.canScrollNext()) {\n      carousel.scrollNext(jump);\n    } else {\n      carousel.scrollTo(0, jump);\n    }\n    play();\n  }\n  var self = {\n    name: 'autoplay',\n    options: optionsHandler.merge(optionsBase, userOptions),\n    init: init,\n    destroy: destroy,\n    play: play,\n    stop: stop,\n    reset: reset\n  };\n  return self;\n}\nAutoplay.globalOptions = undefined;\nexport { Autoplay as default };","map":{"version":3,"names":["defaultOptions","active","breakpoints","delay","jump","playOnInit","stopOnInteraction","stopOnMouseEnter","stopOnLastSnap","rootNode","Autoplay","userOptions","optionsHandler","EmblaCarousel","optionsBase","merge","globalOptions","options","carousel","interaction","timer","init","embla","atMedia","self","destroy","stop","eventStore","internalEngine","emblaRoot","root","on","reset","add","document","visibilityState","window","event","persisted","play","off","jumpOverride","setTimeout","next","clearTimeout","index","kill","get","max","canScrollNext","scrollNext","scrollTo","name","undefined"],"sources":["/Users/nguyenphuhao/Downloads/Nhom24/Mantine_group24-main/node_modules/embla-carousel-autoplay/src/components/Options.ts","/Users/nguyenphuhao/Downloads/Nhom24/Mantine_group24-main/node_modules/embla-carousel-autoplay/src/components/index.ts"],"sourcesContent":["import { CreateOptionsType } from 'embla-carousel/components/Options'\n\nexport type OptionsType = CreateOptionsType<{\n  delay: number\n  jump: boolean\n  playOnInit: boolean\n  stopOnInteraction: boolean\n  stopOnMouseEnter: boolean\n  stopOnLastSnap: boolean\n  rootNode: ((emblaRoot: HTMLElement) => HTMLElement | null) | null\n}>\n\nexport const defaultOptions: OptionsType = {\n  active: true,\n  breakpoints: {},\n  delay: 4000,\n  jump: false,\n  playOnInit: true,\n  stopOnInteraction: true,\n  stopOnMouseEnter: false,\n  stopOnLastSnap: false,\n  rootNode: null,\n}\n\nexport type AutoplayOptionsType = Partial<OptionsType>\n","import { AutoplayOptionsType, defaultOptions, OptionsType } from './Options'\nimport { CreatePluginType } from 'embla-carousel/components/Plugins'\nimport EmblaCarousel, { EmblaCarouselType } from 'embla-carousel'\n\ndeclare module 'embla-carousel/components/Plugins' {\n  interface EmblaPluginsType {\n    autoplay?: AutoplayType\n  }\n}\n\nexport type AutoplayType = CreatePluginType<\n  {\n    play: (jump?: boolean) => void\n    stop: () => void\n    reset: () => void\n  },\n  OptionsType\n>\n\nfunction Autoplay(userOptions?: AutoplayOptionsType): AutoplayType {\n  const optionsHandler = EmblaCarousel.optionsHandler()\n  const optionsBase = optionsHandler.merge(\n    defaultOptions,\n    Autoplay.globalOptions,\n  )\n  let options: AutoplayType['options']\n  let carousel: EmblaCarouselType\n  let interaction: () => void\n  let timer = 0\n  let jump = false\n\n  function init(embla: EmblaCarouselType): void {\n    carousel = embla\n    options = optionsHandler.atMedia(self.options)\n    jump = options.jump\n    interaction = options.stopOnInteraction ? destroy : stop\n    const { eventStore } = carousel.internalEngine()\n    const emblaRoot = carousel.rootNode()\n    const root = (options.rootNode && options.rootNode(emblaRoot)) || emblaRoot\n\n    carousel.on('pointerDown', interaction)\n    if (!options.stopOnInteraction) carousel.on('pointerUp', reset)\n\n    if (options.stopOnMouseEnter) {\n      eventStore.add(root, 'mouseenter', interaction)\n      if (!options.stopOnInteraction) eventStore.add(root, 'mouseleave', reset)\n    }\n\n    eventStore.add(document, 'visibilitychange', () => {\n      if (document.visibilityState === 'hidden') return stop()\n      reset()\n    })\n    eventStore.add(window, 'pagehide', (event: PageTransitionEvent) => {\n      if (event.persisted) stop()\n    })\n\n    if (options.playOnInit) play()\n  }\n\n  function destroy(): void {\n    carousel.off('pointerDown', interaction)\n    if (!options.stopOnInteraction) carousel.off('pointerUp', reset)\n    stop()\n    timer = 0\n  }\n\n  function play(jumpOverride?: boolean): void {\n    stop()\n    if (typeof jumpOverride !== 'undefined') jump = jumpOverride\n    timer = window.setTimeout(next, options.delay)\n  }\n\n  function stop(): void {\n    if (!timer) return\n    window.clearTimeout(timer)\n  }\n\n  function reset(): void {\n    if (!timer) return\n    stop()\n    play()\n  }\n\n  function next(): void {\n    const { index } = carousel.internalEngine()\n    const kill = options.stopOnLastSnap && index.get() === index.max\n\n    if (kill) return destroy()\n\n    if (carousel.canScrollNext()) {\n      carousel.scrollNext(jump)\n    } else {\n      carousel.scrollTo(0, jump)\n    }\n    play()\n  }\n\n  const self: AutoplayType = {\n    name: 'autoplay',\n    options: optionsHandler.merge(optionsBase, userOptions),\n    init,\n    destroy,\n    play,\n    stop,\n    reset,\n  }\n  return self\n}\n\nAutoplay.globalOptions = <AutoplayOptionsType | undefined>undefined\n\nexport default Autoplay\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}