{"ast":null,"code":"'use client';\n\nimport { useState, useRef, useCallback } from 'react';\nimport isEqual from 'fast-deep-equal';\nimport { useFormActions } from './actions/actions.mjs';\nimport { filterErrors } from './filter-errors/filter-errors.mjs';\nimport { getInputOnChange } from './get-input-on-change/get-input-on-change.mjs';\nimport { getStatus } from './get-status/get-status.mjs';\nimport { clearListState } from './lists/clear-list-state.mjs';\nimport { changeErrorIndices } from './lists/change-error-indices.mjs';\nimport { reorderErrors } from './lists/reorder-errors.mjs';\nimport { getPath } from './paths/get-path.mjs';\nimport { setPath } from './paths/set-path.mjs';\nimport { reorderPath } from './paths/reorder-path.mjs';\nimport { insertPath } from './paths/insert-path.mjs';\nimport { removePath } from './paths/remove-path.mjs';\nimport { validateValues } from './validate/validate-values.mjs';\nimport { validateFieldValue } from './validate/validate-field-value.mjs';\nimport { shouldValidateOnChange } from './validate/should-validate-on-change.mjs';\nfunction useForm({\n  name,\n  initialValues = {},\n  initialErrors = {},\n  initialDirty = {},\n  initialTouched = {},\n  clearInputErrorOnChange = true,\n  validateInputOnChange = false,\n  validateInputOnBlur = false,\n  onValuesChange,\n  transformValues = values => values,\n  validate: rules\n} = {}) {\n  const [touched, setTouched] = useState(initialTouched);\n  const [dirty, setDirty] = useState(initialDirty);\n  const [values, _setValues] = useState(initialValues);\n  const [errors, _setErrors] = useState(filterErrors(initialErrors));\n  const valuesSnapshot = useRef(initialValues);\n  const setValuesSnapshot = _values => {\n    valuesSnapshot.current = _values;\n  };\n  const resetTouched = useCallback(() => setTouched({}), []);\n  const resetDirty = _values => {\n    const newSnapshot = _values ? {\n      ...values,\n      ..._values\n    } : values;\n    setValuesSnapshot(newSnapshot);\n    setDirty({});\n  };\n  const setErrors = useCallback(errs => _setErrors(current => filterErrors(typeof errs === \"function\" ? errs(current) : errs)), []);\n  const clearErrors = useCallback(() => _setErrors({}), []);\n  const reset = useCallback(() => {\n    _setValues(valuesSnapshot.current);\n    clearErrors();\n    setDirty({});\n    resetTouched();\n  }, []);\n  const setFieldError = useCallback((path, error) => setErrors(current => ({\n    ...current,\n    [path]: error\n  })), []);\n  const clearFieldError = useCallback(path => setErrors(current => {\n    if (typeof path !== \"string\") {\n      return current;\n    }\n    const clone = {\n      ...current\n    };\n    delete clone[path];\n    return clone;\n  }), []);\n  const clearFieldDirty = useCallback(path => setDirty(current => {\n    if (typeof path !== \"string\") {\n      return current;\n    }\n    const result = clearListState(path, current);\n    delete result[path];\n    return result;\n  }), []);\n  const setFieldValue = useCallback((path, value) => {\n    const shouldValidate = shouldValidateOnChange(path, validateInputOnChange);\n    clearFieldDirty(path);\n    setTouched(currentTouched => ({\n      ...currentTouched,\n      [path]: true\n    }));\n    _setValues(current => {\n      const result = setPath(path, value, current);\n      if (shouldValidate) {\n        const validationResults = validateFieldValue(path, rules, result);\n        validationResults.hasError ? setFieldError(path, validationResults.error) : clearFieldError(path);\n      }\n      onValuesChange?.(result);\n      return result;\n    });\n    !shouldValidate && clearInputErrorOnChange && setFieldError(path, null);\n  }, []);\n  const setValues = useCallback(payload => {\n    _setValues(currentValues => {\n      const valuesPartial = typeof payload === \"function\" ? payload(currentValues) : payload;\n      const result = {\n        ...currentValues,\n        ...valuesPartial\n      };\n      onValuesChange?.(result);\n      return result;\n    });\n    clearInputErrorOnChange && clearErrors();\n  }, []);\n  const reorderListItem = useCallback((path, payload) => {\n    clearFieldDirty(path);\n    _setValues(current => {\n      const result = reorderPath(path, payload, current);\n      onValuesChange?.(result);\n      return result;\n    });\n    _setErrors(errs => reorderErrors(path, payload, errs));\n  }, []);\n  const removeListItem = useCallback((path, index) => {\n    clearFieldDirty(path);\n    _setValues(current => {\n      const result = removePath(path, index, current);\n      onValuesChange?.(result);\n      return result;\n    });\n    _setErrors(errs => changeErrorIndices(path, index, errs, -1));\n  }, []);\n  const insertListItem = useCallback((path, item, index) => {\n    clearFieldDirty(path);\n    _setValues(current => {\n      const result = insertPath(path, item, index, current);\n      onValuesChange?.(result);\n      return result;\n    });\n    _setErrors(errs => changeErrorIndices(path, index, errs, 1));\n  }, []);\n  const validate = useCallback(() => {\n    const results = validateValues(rules, values);\n    _setErrors(results.errors);\n    return results;\n  }, [values, rules]);\n  const validateField = useCallback(path => {\n    const results = validateFieldValue(path, rules, values);\n    results.hasError ? setFieldError(path, results.error) : clearFieldError(path);\n    return results;\n  }, [values, rules]);\n  const getInputProps = (path, {\n    type = \"input\",\n    withError = true,\n    withFocus = true\n  } = {}) => {\n    const onChange = getInputOnChange(value => setFieldValue(path, value));\n    const payload = {\n      onChange\n    };\n    if (withError) {\n      payload.error = errors[path];\n    }\n    if (type === \"checkbox\") {\n      payload.checked = getPath(path, values);\n    } else {\n      payload.value = getPath(path, values);\n    }\n    if (withFocus) {\n      payload.onFocus = () => setTouched(current => ({\n        ...current,\n        [path]: true\n      }));\n      payload.onBlur = () => {\n        if (shouldValidateOnChange(path, validateInputOnBlur)) {\n          const validationResults = validateFieldValue(path, rules, values);\n          validationResults.hasError ? setFieldError(path, validationResults.error) : clearFieldError(path);\n        }\n      };\n    }\n    return payload;\n  };\n  const onSubmit = (handleSubmit, handleValidationFailure) => event => {\n    event?.preventDefault();\n    const results = validate();\n    if (results.hasErrors) {\n      handleValidationFailure?.(results.errors, values, event);\n    } else {\n      handleSubmit?.(transformValues(values), event);\n    }\n  };\n  const getTransformedValues = input => transformValues(input || values);\n  const onReset = useCallback(event => {\n    event.preventDefault();\n    reset();\n  }, []);\n  const isDirty = path => {\n    if (path) {\n      const overriddenValue = getPath(path, dirty);\n      if (typeof overriddenValue === \"boolean\") {\n        return overriddenValue;\n      }\n      const sliceOfValues = getPath(path, values);\n      const sliceOfInitialValues = getPath(path, valuesSnapshot.current);\n      return !isEqual(sliceOfValues, sliceOfInitialValues);\n    }\n    const isOverridden = Object.keys(dirty).length > 0;\n    if (isOverridden) {\n      return getStatus(dirty);\n    }\n    return !isEqual(values, valuesSnapshot.current);\n  };\n  const isTouched = useCallback(path => getStatus(touched, path), [touched]);\n  const isValid = useCallback(path => path ? !validateFieldValue(path, rules, values).hasError : !validateValues(rules, values).hasErrors, [values, rules]);\n  const form = {\n    values,\n    errors,\n    setValues,\n    setInitialValues: setValuesSnapshot,\n    setErrors,\n    setFieldValue,\n    setFieldError,\n    clearFieldError,\n    clearErrors,\n    reset,\n    validate,\n    validateField,\n    reorderListItem,\n    removeListItem,\n    insertListItem,\n    getInputProps,\n    onSubmit,\n    onReset,\n    isDirty,\n    isTouched,\n    setTouched,\n    setDirty,\n    resetTouched,\n    resetDirty,\n    isValid,\n    getTransformedValues\n  };\n  useFormActions(name, form);\n  return form;\n}\nexport { useForm };","map":{"version":3,"names":["useForm","name","initialValues","initialErrors","initialDirty","initialTouched","clearInputErrorOnChange","validateInputOnChange","validateInputOnBlur","onValuesChange","transformValues","values","validate","rules","touched","setTouched","useState","dirty","setDirty","_setValues","errors","_setErrors","filterErrors","valuesSnapshot","useRef","setValuesSnapshot","_values","current","resetTouched","useCallback","resetDirty","newSnapshot","setErrors","errs","clearErrors","reset","setFieldError","path","error","clearFieldError","clone","clearFieldDirty","result","clearListState","setFieldValue","value","shouldValidate","shouldValidateOnChange","currentTouched","setPath","validationResults","validateFieldValue","hasError","setValues","payload","currentValues","valuesPartial","reorderListItem","reorderPath","reorderErrors","removeListItem","index","removePath","changeErrorIndices","insertListItem","item","insertPath","results","validateValues","validateField","getInputProps","type","withError","withFocus","onChange","getInputOnChange","checked","getPath","onFocus","onBlur","onSubmit","handleSubmit","handleValidationFailure","event","preventDefault","hasErrors","getTransformedValues","input","onReset","isDirty","overriddenValue","sliceOfValues","sliceOfInitialValues","isEqual","isOverridden","Object","keys","length","getStatus","isTouched","isValid","form","setInitialValues","useFormActions"],"sources":["/Users/nguyenphuhao/Downloads/Nhom24/Mantine_group24-main/node_modules/@mantine/form/src/use-form.ts"],"sourcesContent":["import { useCallback, useRef, useState } from 'react';\nimport isEqual from 'fast-deep-equal';\nimport { useFormActions } from './actions';\nimport { filterErrors } from './filter-errors';\nimport { getInputOnChange } from './get-input-on-change';\nimport { getStatus } from './get-status';\nimport { changeErrorIndices, clearListState, reorderErrors } from './lists';\nimport { getPath, insertPath, removePath, reorderPath, setPath } from './paths';\nimport {\n  _TransformValues,\n  ClearErrors,\n  ClearFieldDirty,\n  ClearFieldError,\n  GetFieldStatus,\n  GetInputProps,\n  GetTransformedValues,\n  InsertListItem,\n  IsValid,\n  OnReset,\n  OnSubmit,\n  RemoveListItem,\n  ReorderListItem,\n  Reset,\n  ResetDirty,\n  SetErrors,\n  SetFieldError,\n  SetFieldValue,\n  SetValues,\n  UseFormInput,\n  UseFormReturnType,\n  Validate,\n  ValidateField,\n} from './types';\nimport { shouldValidateOnChange, validateFieldValue, validateValues } from './validate';\n\nexport function useForm<\n  Values = Record<string, unknown>,\n  TransformValues extends _TransformValues<Values> = (values: Values) => Values,\n>({\n  name,\n  initialValues = {} as Values,\n  initialErrors = {},\n  initialDirty = {},\n  initialTouched = {},\n  clearInputErrorOnChange = true,\n  validateInputOnChange = false,\n  validateInputOnBlur = false,\n  onValuesChange,\n  transformValues = ((values: Values) => values) as any,\n  validate: rules,\n}: UseFormInput<Values, TransformValues> = {}): UseFormReturnType<Values, TransformValues> {\n  const [touched, setTouched] = useState(initialTouched);\n  const [dirty, setDirty] = useState(initialDirty);\n  const [values, _setValues] = useState(initialValues);\n  const [errors, _setErrors] = useState(filterErrors(initialErrors));\n\n  const valuesSnapshot = useRef<Values>(initialValues);\n  const setValuesSnapshot = (_values: Values) => {\n    valuesSnapshot.current = _values;\n  };\n\n  const resetTouched = useCallback(() => setTouched({}), []);\n  const resetDirty: ResetDirty<Values> = (_values) => {\n    const newSnapshot = _values ? { ...values, ..._values } : values;\n    setValuesSnapshot(newSnapshot);\n    setDirty({});\n  };\n\n  const setErrors: SetErrors = useCallback(\n    (errs) =>\n      _setErrors((current) => filterErrors(typeof errs === 'function' ? errs(current) : errs)),\n    []\n  );\n\n  const clearErrors: ClearErrors = useCallback(() => _setErrors({}), []);\n  const reset: Reset = useCallback(() => {\n    _setValues(valuesSnapshot.current);\n    clearErrors();\n    setDirty({});\n    resetTouched();\n  }, []);\n\n  const setFieldError: SetFieldError<Values> = useCallback(\n    (path, error) => setErrors((current) => ({ ...current, [path]: error })),\n    []\n  );\n\n  const clearFieldError: ClearFieldError = useCallback(\n    (path) =>\n      setErrors((current) => {\n        if (typeof path !== 'string') {\n          return current;\n        }\n\n        const clone = { ...current };\n        delete clone[path];\n        return clone;\n      }),\n    []\n  );\n\n  const clearFieldDirty: ClearFieldDirty = useCallback(\n    (path) =>\n      setDirty((current) => {\n        if (typeof path !== 'string') {\n          return current;\n        }\n\n        const result = clearListState(path, current);\n        delete result[path];\n        return result;\n      }),\n    []\n  );\n\n  const setFieldValue: SetFieldValue<Values> = useCallback((path, value) => {\n    const shouldValidate = shouldValidateOnChange(path, validateInputOnChange);\n    clearFieldDirty(path);\n    setTouched((currentTouched) => ({ ...currentTouched, [path]: true }));\n    _setValues((current) => {\n      const result = setPath(path, value, current);\n\n      if (shouldValidate) {\n        const validationResults = validateFieldValue(path, rules, result);\n        validationResults.hasError\n          ? setFieldError(path, validationResults.error)\n          : clearFieldError(path);\n      }\n\n      onValuesChange?.(result);\n\n      return result;\n    });\n\n    !shouldValidate && clearInputErrorOnChange && setFieldError(path, null);\n  }, []);\n\n  const setValues: SetValues<Values> = useCallback((payload) => {\n    _setValues((currentValues) => {\n      const valuesPartial = typeof payload === 'function' ? payload(currentValues) : payload;\n      const result = { ...currentValues, ...valuesPartial };\n      onValuesChange?.(result);\n      return result;\n    });\n    clearInputErrorOnChange && clearErrors();\n  }, []);\n\n  const reorderListItem: ReorderListItem<Values> = useCallback((path, payload) => {\n    clearFieldDirty(path);\n    _setValues((current) => {\n      const result = reorderPath(path, payload, current);\n      onValuesChange?.(result);\n      return result;\n    });\n    _setErrors((errs) => reorderErrors(path, payload, errs));\n  }, []);\n\n  const removeListItem: RemoveListItem<Values> = useCallback((path, index) => {\n    clearFieldDirty(path);\n    _setValues((current) => {\n      const result = removePath(path, index, current);\n      onValuesChange?.(result);\n      return result;\n    });\n    _setErrors((errs) => changeErrorIndices(path, index, errs, -1));\n  }, []);\n\n  const insertListItem: InsertListItem<Values> = useCallback((path, item, index) => {\n    clearFieldDirty(path);\n    _setValues((current) => {\n      const result = insertPath(path, item, index, current);\n      onValuesChange?.(result);\n      return result;\n    });\n    _setErrors((errs) => changeErrorIndices(path, index, errs, 1));\n  }, []);\n\n  const validate: Validate = useCallback(() => {\n    const results = validateValues(rules, values);\n    _setErrors(results.errors);\n    return results;\n  }, [values, rules]);\n\n  const validateField: ValidateField<Values> = useCallback(\n    (path) => {\n      const results = validateFieldValue(path, rules, values);\n      results.hasError ? setFieldError(path, results.error) : clearFieldError(path);\n      return results;\n    },\n    [values, rules]\n  );\n\n  const getInputProps: GetInputProps<Values> = (\n    path,\n    { type = 'input', withError = true, withFocus = true } = {}\n  ) => {\n    const onChange = getInputOnChange((value) => setFieldValue(path, value as any));\n    const payload: any = { onChange };\n\n    if (withError) {\n      payload.error = errors[path];\n    }\n\n    if (type === 'checkbox') {\n      payload.checked = getPath(path, values);\n    } else {\n      payload.value = getPath(path, values);\n    }\n\n    if (withFocus) {\n      payload.onFocus = () => setTouched((current) => ({ ...current, [path]: true }));\n      payload.onBlur = () => {\n        if (shouldValidateOnChange(path, validateInputOnBlur)) {\n          const validationResults = validateFieldValue(path, rules, values);\n\n          validationResults.hasError\n            ? setFieldError(path, validationResults.error)\n            : clearFieldError(path);\n        }\n      };\n    }\n\n    return payload;\n  };\n\n  const onSubmit: OnSubmit<Values, TransformValues> =\n    (handleSubmit, handleValidationFailure) => (event) => {\n      event?.preventDefault();\n      const results = validate();\n\n      if (results.hasErrors) {\n        handleValidationFailure?.(results.errors, values, event);\n      } else {\n        handleSubmit?.(transformValues(values) as any, event);\n      }\n    };\n\n  const getTransformedValues: GetTransformedValues<Values, TransformValues> = (input) =>\n    (transformValues as any)(input || values);\n\n  const onReset: OnReset = useCallback((event) => {\n    event.preventDefault();\n    reset();\n  }, []);\n\n  const isDirty: GetFieldStatus<Values> = (path) => {\n    if (path) {\n      const overriddenValue = getPath(path, dirty);\n      if (typeof overriddenValue === 'boolean') {\n        return overriddenValue;\n      }\n\n      const sliceOfValues = getPath(path, values);\n      const sliceOfInitialValues = getPath(path, valuesSnapshot.current);\n      return !isEqual(sliceOfValues, sliceOfInitialValues);\n    }\n\n    const isOverridden = Object.keys(dirty).length > 0;\n    if (isOverridden) {\n      return getStatus(dirty);\n    }\n\n    return !isEqual(values, valuesSnapshot.current);\n  };\n\n  const isTouched: GetFieldStatus<Values> = useCallback(\n    (path) => getStatus(touched, path),\n    [touched]\n  );\n\n  const isValid: IsValid<Values> = useCallback(\n    (path) =>\n      path\n        ? !validateFieldValue(path, rules, values).hasError\n        : !validateValues(rules, values).hasErrors,\n    [values, rules]\n  );\n\n  const form: UseFormReturnType<Values, TransformValues> = {\n    values,\n    errors,\n    setValues,\n    setInitialValues: setValuesSnapshot,\n    setErrors,\n    setFieldValue,\n    setFieldError,\n    clearFieldError,\n    clearErrors,\n    reset,\n    validate,\n    validateField,\n    reorderListItem,\n    removeListItem,\n    insertListItem,\n    getInputProps,\n    onSubmit,\n    onReset,\n    isDirty,\n    isTouched,\n    setTouched,\n    setDirty,\n    resetTouched,\n    resetDirty,\n    isValid,\n    getTransformedValues,\n  };\n\n  useFormActions(name, form);\n\n  return form;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}